[{"name":"app.R","content":"library(shiny)\r\nlibrary(tidyverse)\r\nlibrary(DT)\r\nlibrary(bslib)\r\nlibrary(shinyjs)\r\nlibrary(curl)\r\n\r\nui <- page_sidebar(\r\n  useShinyjs(),\r\n  theme = bs_theme(\r\n    bg = \"#FFE8F7\",\r\n    fg = \"#FF33A4\",\r\n    primary = \"#FF69B4\",\r\n  ),\r\n  title = \"Pinktastic Data ✨\",\r\n  sidebar = sidebar(\r\n    fileInput(\"file\", \"Upload CSV file\", accept = c(\".csv\")),\r\n    selectInput(\"plot_type\", \"Plot Type\",\r\n                choices = c(\"Scatter\" = \"scatter\",\r\n                            \"Line\" = \"line\",\r\n                            \"Bar\" = \"bar\",\r\n                            \"Box\" = \"box\")),\r\n    selectInput(\"x_var\", \"X Variable\", choices = NULL),\r\n    selectInput(\"y_var\", \"Y Variable\", choices = NULL),\r\n    selectInput(\"color_var\", \"Color Variable\", choices = NULL, multiple = FALSE),\r\n    actionButton(\"pinkify\", \"Make it PINK! ✨\", \r\n                 class = \"btn-block\", \r\n                 style = \"background-color: pink; color: deeppink; font-weight: bold;\")\r\n  ),\r\n  \r\n  layout_columns(\r\n    card(\r\n      full_screen = TRUE,\r\n      card_header(\"Data Table\"),\r\n      DTOutput(\"data_table\")\r\n    ),\r\n    card(\r\n      full_screen = TRUE,\r\n      card_header(\"Plot\"),\r\n      plotOutput(\"plot\", height = \"600px\")\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  data <- reactiveVal()\r\n  is_pink <- reactiveVal(FALSE)\r\n  \r\n  observeEvent(input$pinkify, {\r\n    is_pink(!is_pink())\r\n  })\r\n  \r\n  observeEvent(input$file, {\r\n    req(input$file)\r\n    df <- read.csv(input$file$datapath)\r\n    data(df)\r\n    \r\n    updateSelectInput(session, \"x_var\", choices = names(df))\r\n    updateSelectInput(session, \"y_var\", choices = names(df))\r\n    updateSelectInput(session, \"color_var\", \r\n                      choices = c(\"None\" = \"none\", names(df)))\r\n  })\r\n  \r\n  output$data_table <- renderDT({\r\n    req(data())\r\n    datatable(data(), filter = \"top\", options = list(pageLength = 10))\r\n  })\r\n  \r\n  output$plot <- renderPlot({\r\n    req(data(), input$x_var, input$y_var)\r\n    \r\n    # Base plot\r\n    if (input$color_var != \"none\") {\r\n      p <- ggplot(data(), aes_string(x = input$x_var, y = input$y_var, \r\n                                     color = input$color_var))\r\n    } else {\r\n      p <- ggplot(data(), aes_string(x = input$x_var, y = input$y_var))\r\n    }\r\n    \r\n    # Add geometry based on plot type\r\n    if (is_pink()) {\r\n      if (input$color_var == \"none\") {\r\n        p <- switch(input$plot_type,\r\n                    \"scatter\" = p + geom_point(size = 3, color = \"deeppink\"),\r\n                    \"line\" = p + geom_line(linewidth = 1, color = \"hotpink\") + \r\n                      geom_point(size = 3, color = \"deeppink\"),\r\n                    \"bar\" = p + geom_bar(stat = \"identity\", fill = \"deeppink\"),\r\n                    \"box\" = p + geom_boxplot(fill = \"pink\", color = \"deeppink\"))\r\n      } else {\r\n        p <- switch(input$plot_type,\r\n                    \"scatter\" = p + geom_point(size = 3),\r\n                    \"line\" = p + geom_line(linewidth = 1) + geom_point(size = 3),\r\n                    \"bar\" = p + geom_bar(stat = \"identity\"),\r\n                    \"box\" = p + geom_boxplot()) +\r\n          scale_color_manual(values = c(\"deeppink\", \"hotpink\", \"pink\", \"deeppink4\", \"magenta\"))\r\n      }\r\n      \r\n      sparkle <- \"\\u2728\"  # Unicode sparkle emoji\r\n      \r\n      # Add sparkles ✨\r\n      p <- p + \r\n        theme_minimal() +\r\n        theme(\r\n          plot.background = element_rect(fill = \"pink\", color = NA),\r\n          panel.background = element_rect(fill = \"mistyrose\", color = NA),\r\n          panel.grid.major = element_line(color = \"white\"),\r\n          panel.grid.minor = element_line(color = \"white\"),\r\n          text = element_text(color = \"hotpink\", face = \"bold\"),\r\n          axis.text = element_text(color = \"deeppink\"),\r\n          title = element_text(color = \"deeppink4\"),\r\n          legend.key = element_rect(fill = \"mistyrose\"),\r\n          legend.text = element_text(color = \"deeppink\"),\r\n          legend.title = element_text(color = \"deeppink4\"),\r\n          plot.title = element_text(size = 18)\r\n        ) +\r\n        labs(title = paste0(sparkle, \" \", input$y_var, \" vs \", input$x_var, \" \", sparkle))\r\n      \r\n    } else {\r\n      p <- switch(input$plot_type,\r\n                  \"scatter\" = p + geom_point(size = 2),\r\n                  \"line\" = p + geom_line(linewidth = 0.8) + geom_point(size = 2),\r\n                  \"bar\" = p + geom_bar(stat = \"identity\"),\r\n                  \"box\" = p + geom_boxplot()) +\r\n        theme_minimal() +\r\n        labs(title = paste(input$y_var, \"vs\", input$x_var))\r\n    }\r\n    \r\n    p\r\n  })\r\n  \r\n  # Make the pinkify button pulse when active\r\n  observe({\r\n    if (is_pink()) {\r\n      runjs(\"\r\n        $('#pinkify').css('animation', 'pulse 2s infinite');\r\n        $('#pinkify').css('background-color', 'deeppink');\r\n        $('#pinkify').css('color', 'white');\r\n      \")\r\n    } else {\r\n      runjs(\"\r\n        $('#pinkify').css('animation', 'none');\r\n        $('#pinkify').css('background-color', 'pink');\r\n        $('#pinkify').css('color', 'deeppink');\r\n      \")\r\n    }\r\n  })\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"}]
